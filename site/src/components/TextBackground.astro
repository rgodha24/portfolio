<div class="w-full h-full filter-blur-[0.75px]">
   <canvas aria-hidden="true" id="canvas"></canvas>
</div>
<script>
   let handle: number;
   document.addEventListener("astro:after-swap", () => {
      cancelAnimationFrame(handle);
   });

   document.addEventListener("astro:page-load", () => {
      const canvas = document.getElementById("canvas")! as HTMLCanvasElement;
      // going to a page without a background
      if (!canvas) return;
      const ctx = canvas.getContext("2d")!;
      const main = document.getElementById("main")!;

      let sizes = calculateSizes(main.getBoundingClientRect());
      let dpr = window.devicePixelRatio || 1;
      let text: string[] = [];

      window.addEventListener("resize", onResize);
      onResize();

      function onResize() {
         sizes = calculateSizes(main.getBoundingClientRect());

         dpr = window.devicePixelRatio || 1;
         console.log(dpr);
         canvas.height = sizes.height * dpr;
         canvas.width = sizes.width * dpr;

         canvas.style.height = `${sizes.height}px`;
         canvas.style.width = `${sizes.width}px`;
         text = [];

         ctx.setTransform(1, 0, 0, 1, 0, 0);
         ctx.font = `300 16px "Monaspace Krypton", ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace`;
         ctx.letterSpacing = `${sizes.letterSpacing}px`;
         ctx.textRendering = "optimizeLegibility";
         ctx.scale(dpr, dpr);
      }

      let prevTime = 0;
      let prevH = 0;
      let prevScroll = 0;

      function animate(time: DOMHighResTimeStamp) {
         if (text.length === 0) {
            text = generateText(sizes.lines, sizes.letters);
         }
         if (!prevTime) {
            prevTime = time;
         }
         let textUpdated = false;
         if (time - prevTime >= 100) {
            prevTime = time;
            updateText(text);
            textUpdated = true;
         }

         handle = requestAnimationFrame(animate);

         if (prevH !== window.innerHeight || prevScroll !== window.scrollY || textUpdated) {
            const gradient = ctx.createLinearGradient(0, 0, 0, sizes.height);
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            gradient.addColorStop(0, "#3730A3"); //indigo-800

            // Math.min to stop overscrolling bugs
            gradient.addColorStop(
               Math.min((window.innerHeight / 2 + window.scrollY) / sizes.height, 1),
               "#3730A3" /*indigo-800*/,
            );
            gradient.addColorStop(
               Math.min((window.innerHeight + window.scrollY) / sizes.height, 1),
               "#38BDF9" /*sky-400*/,
            );
            ctx.fillStyle = gradient;

            text.forEach((line, i) => {
               ctx.fillText(line, 0, (i + 0.85) * sizes.lineHeight, sizes.width);
            });
         }

         prevH = window.innerHeight;
         prevScroll = window.scrollY;
      }

      requestAnimationFrame(animate);

      const ALL_LETTERS = "abcdefghijklmnopqrstuvwxyz";

      function generateText(lines: number, letters: number): string[] {
         const text: string[] = [];
         for (let i = 0; i < lines; i++) {
            const line = [];
            for (let j = 0; j < letters; j++) {
               line.push(ALL_LETTERS[Math.floor(Math.random() * ALL_LETTERS.length)]);
            }
            text.push(line.join(""));
         }

         return text;
      }

      // mutates in place
      function updateText(text: string[]) {
         const first = text.shift()!;
         text.push(first);
      }

      function calculateSizes({ height, width }: { height: number; width: number }) {
         const minLineHeight = 18.5;
         const maxLineHeight = 20.5;
         const minLetterSpacing = -0.4;
         const maxLetterSpacing = 0.4;
         const charWidth = 9.92;

         let bestSolution = null;
         let minEmptySpace = Infinity;

         for (let lineHeight = minLineHeight; lineHeight <= maxLineHeight; lineHeight += 0.1) {
            const lines = Math.floor(height / lineHeight);

            for (
               let letterSpacing = minLetterSpacing;
               letterSpacing <= maxLetterSpacing;
               letterSpacing += 0.1
            ) {
               const effectiveCharWidth = charWidth + letterSpacing;
               const letters = Math.floor(width / effectiveCharWidth);

               const usedWidth = letters * effectiveCharWidth;
               const usedHeight = lines * lineHeight;

               const emptySpace = width - usedWidth + (height - usedHeight);

               if (emptySpace < minEmptySpace) {
                  minEmptySpace = emptySpace;
                  bestSolution = {
                     lines: lines,
                     letters: letters,
                     lineHeight: parseFloat(lineHeight.toFixed(1)),
                     letterSpacing: parseFloat(letterSpacing.toFixed(1)),
                  };
               }
            }
         }

         return { ...bestSolution!, height, width };
      }
   });
</script>
